import React, { useEffect, useState, useRef } from 'react';
import { View, StyleSheet, ActivityIndicator, TouchableWithoutFeedback, ScrollView, Alert } from 'react-native';

import { useDispatch } from 'react-redux';

import Menu, { MenuTrigger, MenuOptions, MenuOption, renderers } from 'react-native-popup-menu';

import { MaterialCommunityIcons, MaterialIcons } from '@expo/vector-icons';

import MyContainer from '../components/MyContainer';
import MyPickerInput from '../components/MyPickerInput';
import MyTextInput from '../components/MyTextInput';
import MyWebView from '../components/MyWebView';
import SubmitButton from '../components/SubmitButton';
import CancelButton from '../components/CancelButton';

import { Text, Bold } from '../components/Tags';
import * as GlobalFunctions from '../common/GlobalFunctions';
import GS from '../common/GlobalStyles';
import Colors from '../constants/Colors';
import Variables from '../constants/Variables';
import { ValidationType } from '../constants/Enums';

import * as testActions from '../store/actions/test';
import MyDialog from '../components/MyDialog';

const { ContextMenu, SlideInMenu, Popover } = renderers;

const StartOpenTestScreen = props => {

	const [isLoading, setIsLoading] = useState(true);
	const [showButtonLoader, setShowButtonLoader] = useState(false);
	const [isSubmitting, setIsSubmitting] = useState(false);

	const [formValues, setFormValues] = useState({});
	const [formErrors, setFormErrors] = useState({});
	const [formRefs, setFormRefs] = useState({});

	const [lang, setLang] = useState(2);

	const [currQues, setCurrQues] = useState();

	const [correctOptionId, setSetCorrectOptionId] = useState(0);
	const [forViewOnly, setForViewOnly] = useState(false);


	const [isAttempted, setIsAttempted] = useState(0);
	const [selectedOptionId, setSelectedOptionId] = useState(0);
	const [selectedSurety, setSelectedSurety] = useState(0);

	const [showBookmarkLoader, setShowBookmarkLoader] = useState(false);

	const [reportMenuRef, setReportMenuRef] = useState();
	const [reportType, setReportType] = useState(0);

	const [noMoreQuestions, setNoMoreQuestions] = useState(false);
	const [isSpecial, setIsSpecial] = useState(0);
	const [isVisible, setIsVisible] = useState(false);

	const [noSelctionIsVisible, setNoSelecationIsVisible] = useState(false);
	const [reportingBoxIsVisible, setReportingBoxIsVisible] = useState(false);
	const [isVisibleExamStop, setIsVisibleExamStop] = useState(false);
	const [isVisibleSkipQuestion, setSkipQuestion] = useState(false);



	const dispatch = useDispatch();

	const renderNextQuestion = async (special) => {
		try {
			setIsLoading(true);

			const apiData = await dispatch(testActions.getOpenTestQuestion(Variables.ExamId, special));
			setCurrQues(apiData);

			if (apiData == null || apiData.length == 0) {
				setNoMoreQuestions(true);
			}

			setIsLoading(false);
		} catch (err) {
			//setIsLoading(false);
			GlobalFunctions.showMessage('An Error Occurred!', err.message);
		}
	}

	useEffect(() => {

		const getData = async () => {
			setLang(props.route.params.langId);
			setIsSpecial(props.route.params.special);
			formValues['language_id'] = props.route.params.langId;
			await renderNextQuestion(props.route.params.special);
		}
		getData();
	}, [dispatch, props]);

	if (isLoading) {
		return (
			<MyContainer navigation={props.navigation} title={isSpecial == 1 ? "Special One Test" : "One Test"} padder={false} hideLeftIcon={true} >
				<View style={GS.centered}>
					<ActivityIndicator size="large" color={Colors.primaryDark} />
				</View>
			</MyContainer>
		);
	}

	const skipClickHandler = () => {

		setSkipQuestion(true);
		//  GlobalFunctions.showConfirmation('Skip Question?', 'Are you sure you want to skip this question?', skipThisQuestion)

	}

	const skipThisQuestion = () => {
		setIsAttempted(0);
		submitQuestion(true);
		setSkipQuestion(false)
	}

	const submitClickHandler = () => {
		if (isAttempted == 0) {
			setNoSelecationIsVisible(true)
			return;
		}
		if (currQues.selected_option_id > 0 && selectedSurety == 0) {
			setIsVisible(true);
			return;
		}
		submitQuestion(false);
	}

	const submitQuestion = async (skipping) => {
		setShowButtonLoader(true);

		formValues['special'] = isSpecial;
		formValues['exam_id'] = currQues.exam_id;
		formValues['batch_id'] = Variables.BatchId;
		formValues['question_id'] = currQues.id;
		formValues['correct_option_id'] = currQues.correct_option_id;
		formValues['selected_option_id'] = skipping ? "0" : currQues.selected_option_id;

		const isCorrect = parseInt(currQues.selected_option_id) == parseInt(currQues.correct_option_id);

		if (skipping) {
			formValues['is_correct'] = 0;
			formValues['skipped'] = 1;
			formValues['surety'] = 0;
		} else {
			formValues['is_correct'] = isCorrect ? 1 : 0;
			formValues['skipped'] = 0;
			formValues['surety'] = selectedSurety;
		}

		const negativeScore = ((-1) * parseFloat(currQues.marks_per_question) * parseFloat(currQues.negative_percent) / 100);
		if (isAttempted == 1 && !skipping) {
			formValues['score'] = isCorrect ? parseFloat(currQues.marks_per_question) : negativeScore;
		} else {
			formValues['score'] = '0';
		}

		try {
			await dispatch(testActions.submitOpenTest(formValues));

			setShowButtonLoader(false);

			if (skipping) {
				await nextClickHandler();
			} else {
				setSetCorrectOptionId(currQues.correct_option_id);
				setForViewOnly(true);
			}
		} catch (err) {
			setShowButtonLoader(false);
			GlobalFunctions.showMessage('An Error Occurred!', err.message);
		}
	}

	const nextClickHandler = async () => {
		setForViewOnly(false);
		setIsAttempted(0);
		setSelectedOptionId(0);
		setSelectedSurety(0);
		await renderNextQuestion(isSpecial);
	}

	const suretyClickHandler = (sno) => {
		if (!forViewOnly) {
			if (sno == currQues.answer_surety) {
				setSelectedSurety(0);
				currQues.answer_surety = 0;
			} else {
				setSelectedSurety(sno);
				currQues.answer_surety = sno;
			}
		}
	}

	const markAnswer = optionId => {
		if (!forViewOnly) {
			if (currQues.selected_option_id == optionId) {
				setSelectedOptionId(0);
				setIsAttempted(0);
				setSelectedSurety(0);
				currQues.selected_option_id = 0;
				currQues.is_attempted = 0;
			} else {
				setSelectedOptionId(optionId);
				setIsAttempted(1);
				currQues.selected_option_id = optionId;
				currQues.is_attempted = 1;
			}
		}
	}

	const examStopClickHandler = () => {

		setIsVisibleExamStop(true);
		GlobalFunctions.navigate(props, "Dashboard");


	}

	const testStopped = () => {
		GlobalFunctions.navigate(props, "Dashboard");

	}

	const renderOptions = () => {
		let arrOptions = [];

		currQues.options.map((item, index) => {
			arrOptions.push(
				<TouchableWithoutFeedback key={index} onPress={() => markAnswer(item.id)}>
					<View style={{
						...GS.row100, ...GS.rounded10, ...GS.shadow, ...GS.p7, ...GS.acenter, ...GS.mv10,
						...GS.rounded50, ...GS.border,
						...(forViewOnly && item.id == correctOptionId ? GS.bgSuccessLight :
							forViewOnly && item.id == selectedOptionId ? GS.bgLightDanger :
								item.id == selectedOptionId ? GS.bgheadingColorLight : GS.bgWhite)
					}}>
						<View style={{ ...GS.jcenter, ...GS.acenter }}>
							<Bold style={GS.fs16}>({String.fromCharCode(index + 97)})</Bold>
						</View>
						<View style={{ ...GS.f1, ...GS.ph5, ...GS.pt10 }}>
							<MyWebView html={lang == 1 ? item.option_text_en : item.option_text_hi} forOption={true}
								textColor={forViewOnly && (item.id == correctOptionId || item.id == selectedOptionId) ? "black" : "black"} />
						</View>

						<View style={{ ...GS.w25, ...GS.acenter }}>
							{
								forViewOnly ?
									<MaterialCommunityIcons size={20}
										color={item.id == correctOptionId ? Colors.success : Colors.danger && item.id == selectedOptionId ? Colors.danger : Colors.blue}
										name={item.id == correctOptionId ? "radiobox-marked" :
											item.id == selectedOptionId ? "radiobox-marked" : "checkbox-blank-circle-outline"} />
									:

									<MaterialCommunityIcons size={20}
										color={item.id == selectedOptionId ? Colors.blue : Colors.blue}
										name={item.id == selectedOptionId ? "radiobox-marked" : "checkbox-blank-circle-outline"} />
							}
						</View>
					</View>
				</TouchableWithoutFeedback>
			);
		})

		return arrOptions;
	}

	const bookmarkClickHandler = async () => {
		setShowBookmarkLoader(true);
		try {
			const apiResponse = await dispatch(testActions.changeBookmark(currQues.id));
			currQues.bookmarked = currQues.bookmarked == "1" ? "0" : "1";
			GlobalFunctions.showMessage('Bookmarking Status', apiResponse.message);
			setShowBookmarkLoader(false);
		} catch (err) {
			setShowBookmarkLoader(false);
			GlobalFunctions.showMessage('An Error Occurred!', err.message);
		}
	}


	const reportQuestionClickHandler = () => {
		if (reportType == 0) {
			setIsVisible(true);
			// GlobalFunctions.showMessage('Select Reporting Reason', 'Please select a reason for reporting this question');
			return;
		}

		setIsSubmitting(true);
		setTimeout(() => {
			submitReportedQuestion();
		}, 50);

	}

	const submitReportedQuestion = async () => {

		setIsSubmitting(false);

		if (reportType == 5 && (formValues['remarks'] == undefined || formValues['remarks'] == '')) {
			GlobalFunctions.showMessage('Enter Your Comments', 'Please enter your comments and specify reason why you are reporting this question');
			return;
		}

		setShowButtonLoader(true);
		try {
			const apiResponse = await dispatch(testActions.reportQuestion(currQues.id, reportType, currQues.reported_id, formValues['remarks']));
			currQues.reporting_type = reportType;
			currQues.remarks = formValues['remarks'] == undefined ? '' : formValues['remarks'];
			if (currQues.reported_id == "0") {
				currQues.reported_id = apiResponse.data;
			}

			setReportingBoxIsVisible(true)
			// GlobalFunctions.showMessage('Reporting Status', apiResponse.message);


			setShowButtonLoader(false);
			reportMenuRef.close();
		} catch (err) {
			setShowButtonLoader(false);
			GlobalFunctions.showMessage('An Error Occurred!', err.message);
		}
	}


	const renderReportingOptions = () => {
		const optionTexts = ['Question Language Wrong', 'Option Wrong', 'Answer Wrong', 'Explanation Wrong', 'Other'];

		let reportingOptions = [];

		if (noMoreQuestions) return reportingOptions;

		if (currQues.responded_remarks != "") {
			reportingOptions.push(
				<Bold key="r_msg" style={{ ...GS.fs16, ...GS.textPrimaryDark, ...GS.mb10 }}>
					This Question and Option is corrected by Admin, and is valid, please choose the best answer.{"\n"}Admin remarks:
				</Bold>
			)

			reportingOptions.push(
				<ScrollView key="r_remark" style={{ flex: 1 }} keyboardShouldPersistTaps="always">
					<TouchableWithoutFeedback>
						<Text style={{ lineHeight: 23 }}>{currQues.responded_remarks}</Text>
					</TouchableWithoutFeedback>
				</ScrollView>
			);
		} else {
			optionTexts.map((item, index) => {
				reportingOptions.push(
					<View key={"rro" + index} style={{ ...GS.row100, ...GS.mv5 }}>
						<TouchableWithoutFeedback disabled={currQues.reportable == "0"} onPress={() => setReportType(index + 1)}>
							<View style={{ ...GS.row100, ...GS.h35, ...GS.acenter, ...GS.jspaceb }}>
								<Bold style={GS.fs18}>{item}</Bold>
								{
									currQues.reportable == "1" ?
										<MaterialCommunityIcons size={23} color={Colors.black}
											name={reportType == index + 1 ? "checkbox-marked-circle" : "checkbox-blank-circle-outline"} />
										:
										<MaterialCommunityIcons size={23} color={reportType == index + 1 ? Colors.black : Colors.lightGray}
											name={reportType == index + 1 ? "checkbox-marked-circle" : "checkbox-blank-circle-outline"} />
								}
							</View>
						</TouchableWithoutFeedback>
					</View>
				);
			});
		}

		return (
			<View style={{ ...GS.w100p, ...GS.p20, height: 380 }}>
				<Bold style={{ ...GS.fs24, ...GS.tcenter, ...GS.pb25, ...GS.textPrimaryDark }}>Report Question?</Bold>

				{
					reportType == 0 ?
						reportingOptions :
						<>
							<View style={{ ...GS.row100 }}>
								<View style={GS.f1}>
									<Bold style={{ ...GS.fs17 }}>You have selected</Bold>
								</View>
								<View style={{ ...GS.f1 }}>
									<TouchableWithoutFeedback onPress={() => setReportType(0)}>
										<Bold style={{ ...GS.textPrimaryDark, ...GS.sright, ...GS.ph5, ...GS.pt2 }}>Change</Bold>
									</TouchableWithoutFeedback>
								</View>
							</View>
							<Bold style={{ ...GS.fs17, ...GS.bgPrimary, ...GS.p2 }}>{optionTexts[reportType - 1]}</Bold>
							<View style={{ ...GS.w100p }}>
								<MyTextInput name="remarks" value={formValues} error={formErrors} submitting={isSubmitting}
									initialValue={formValues['remarks']} showLabel={true} label="Your Comments"
									refs={formRefs} multiline={true} numberOfLines={5} returnKeyType="done"
									textInputStyle={{ maxHeight: 135 }} />
							</View>
						</>
				}

				{
					currQues.reportable == "1" && reportType > 0 &&
					<View style={{ ...GS.row100, ...GS.jspacea, ...GS.mt25 }}>
						<SubmitButton title="Submit" disabled={reportType == 0} IsLoading={showButtonLoader} onPress={reportQuestionClickHandler} textStyle={{ ...GS.textWhite }} style={{ ...GS.bgheadingColor, ...GS.mh10, ...GS.f1, ...GS.mb10, ...GS.rounded50 }} />
					</View>
				}
			</View>
		)
	}

	if (noMoreQuestions) {
		return (
			<MyContainer navigation={props.navigation} title={isSpecial == 1 ? "Special One Test" : "One Test"} padder={false} hideLeftIcon={true} showExamStopIcon={true}
				examStopClickHandler={examStopClickHandler} /*submitMenuRef={submitMenuRef} menuClose={() => closeMenu()}*/ >

				<View style={{ ...GS.f1, ...GS.jcenter, ...GS.acenter }}>
					<Bold style={{ ...GS.tcenter, ...GS.fs17, ...GS.mb20, ...GS.ph20, lineHeight: 34 }}>
						{
							isSpecial ?
								"Great !! " + "\n" + "There exists no more questions that you have left or attempted wrong to re-attempt" :
								"No more questions available for now" + "\n" + "Please try again later"
						}
					</Bold>
					<SubmitButton title="Ok" onPress={examStopClickHandler} />
				</View>

			</MyContainer>
		)
	}

	return (

		<MyContainer navigation={props.navigation} title={isSpecial == 1 ? "Special One Test" : "One Test"} padder={false} hideLeftIcon={true} showExamStopIcon={true}
			examStopClickHandler={examStopClickHandler} /*submitMenuRef={submitMenuRef} menuClose={() => closeMenu()}*/ >

			<View style={{ ...GS.ph20, ...GS.pt10 }}>
				{/*<View style={{ ...GS.row100, ...GS.jcenter, ...GS.mb30 }}>
                     <TouchableWithoutFeedback onPress={bookmarkClickHandler} disabled={showBookmarkLoader}>
                        <View style={{
                            ...GS.w30, ...GS.h30, ...GS.rounded30, ...GS.border, ...GS.jcenter, ...GS.acenter, ...GS.mt15,
                            backgroundColor: currQues.bookmarked == "1" ? Colors.primary : Colors.white
                        }}>
                            {
                                showBookmarkLoader ?
                                    <ActivityIndicator size="small" color={Colors.black} />
                                    :
                                    <MaterialIcons name="bookmark-border" size={18} color={Colors.black} />
                            }
                        </View>
                    </TouchableWithoutFeedback> 
                    <View style={{ ...styles.txtPrefLang, flex: 1 }}>
                        <Text style={{ color: Colors.primaryDark }}>Choose Language</Text>
                    </View>
                    <View style={{ width: 115 }}>
                        <MyPickerInput name="language_id" value={formValues} error={formErrors} submitting={isSubmitting}
                            initialValue={formValues['language_id']} hideSelect={true} label="Language" pickerData={Variables.LanguageType}
                            pickerId="id" pickerValue="name" validationType={ValidationType.Required} refs={formRefs}
                            pickerStyle={{ height: 30 }} onValueChange={(value) => setLang(value)} />
                    </View>
                </View> */}

				<View style={{ ...GS.f1, ...GS.aright, ...GS.jcenter, ...GS.mb15 }}>
					<Menu
						ref={r => setReportMenuRef(r)}
						renderer={SlideInMenu}
						rendererProps={{ anchorStyle: styles.anchorStyle }}
						onOpen={() => { setReportType(currQues.reporting_type); formValues['remarks'] = currQues.remarks; }}
					>
						<MenuTrigger>
							<MaterialIcons name="report" size={24} color="lightgray" />
						</MenuTrigger>
						<MenuOptions customStyles={optionsStyles} >
							<MenuOption onSelect={() => { return false; }}>
								{renderReportingOptions()}
							</MenuOption>
						</MenuOptions>
					</Menu>
				</View>
				<MyDialog isVisible={isVisible} hideDialog={() => setIsVisible(false)}
					title="Please select surety"
					style={{ ...GS.rounded10, height: 250, ...GS.bgWhite }}>
					<View style={{ ...GS.h80 }}>
						<Text style={{ ...GS.fs15, ...GS.tcenter }}  >Please select surety to tell us about how much sure you are about your answer </Text>
					</View>
					<View style={{ ...GS.h60 }}>
						<SubmitButton title="Ok" onPress={() => setIsVisible(false)} textStyle={{ ...GS.textWhite }} style={{ ...GS.bgLightGreen, ...GS.minw75, ...GS.f1, ...GS.mb10 }} />
					</View>
				</MyDialog>
				<MyDialog isVisible={reportingBoxIsVisible} hideDialog={() => setReportingBoxIsVisible(false)}
					title="Reporting Status"
					style={{ ...GS.rounded10, height: 250, ...GS.bgWhite }}>
					<View style={{ ...GS.h80 }}>
						<Text style={{ ...GS.fs18, ...GS.tcenter }}  >Question reported successfully.</Text>
					</View>
					<View style={{ ...GS.h60 }}>
						<SubmitButton title="Ok" onPress={() => setReportingBoxIsVisible(false)} textStyle={{ ...GS.textWhite }} style={{ ...GS.bgLightGreen, ...GS.minw75, ...GS.f1, ...GS.mb10 }} />
					</View>
				</MyDialog>

				<MyDialog isVisible={noSelctionIsVisible} hideDialog={() => setNoSelecationIsVisible(false)}
					title="No Option Selected"
					style={{ ...GS.rounded10, height: 250, ...GS.bgWhite }}>
					<View style={{ ...GS.h80 }}>
						<Text style={{ ...GS.fs15, ...GS.tcenter }}  >Please select any option or press skip button to skip this question</Text>
					</View>
					<View style={{ ...GS.h60 }}>
						<SubmitButton title="Ok" onPress={() => setNoSelecationIsVisible(false)} textStyle={{ ...GS.textWhite }} style={{ ...GS.bgLightGreen, ...GS.minw75, ...GS.f1, ...GS.mb10 }} />
					</View>
				</MyDialog>

				<MyDialog isVisible={isVisibleExamStop} hideDialog={() => setIsVisibleExamStop(false)}
					title=""
					style={{ ...GS.rounded10, height: 250, ...GS.bgheadingColor }}>
					<View style={{ ...GS.h80, ...GS.pt30 }}>
						<Text style={{ ...GS.fs17, ...GS.tcenter, ...GS.textWhite }}  >Are you sure you want to quit the test?</Text>
					</View>
					<View style={{ ...GS.h60 }}>
						<SubmitButton title="Yes" onPress={testStopped} textStyle={{ ...GS.textWhite }} style={{ ...GS.bgheadingColor, ...GS.minw75, ...GS.f1, ...GS.mb10, ...GS.border3, ...GS.borderWhite }} />
					</View>
					<View style={{ ...GS.h60 }}>
						<SubmitButton title="No" onPress={() => setIsVisibleExamStop(false)} textStyle={{ ...GS.textWhite }} style={{ ...GS.bgBlueDark, ...GS.minw75, ...GS.f1, ...GS.mb10 }} />
					</View>
				</MyDialog>


				<MyDialog isVisible={isVisibleSkipQuestion} hideDialog={() => setSkipQuestion(false)}
					title=""
					style={{ ...GS.rounded10, height: 250, ...GS.bgheadingColor }}>
					<View style={{ ...GS.h80, ...GS.pt30 }}>
						<Text style={{ ...GS.fs17, ...GS.tcenter, ...GS.textWhite }}  >Are you sure you want to Skip the question? </Text>
					</View>
					<View style={{ ...GS.h60 }}>
						<SubmitButton title="Yes" onPress={skipThisQuestion} textStyle={{ ...GS.textWhite }} style={{ ...GS.bgheadingColor, ...GS.minw75, ...GS.f1, ...GS.mb10, ...GS.border3, ...GS.borderWhite }} />
					</View>
					<View style={{ ...GS.h60 }}>
						<SubmitButton title="No" onPress={() => setSkipQuestion(false)} textStyle={{ ...GS.textWhite }} style={{ ...GS.bgBlueDark, ...GS.minw75, ...GS.f1, ...GS.mb10 }} />
					</View>
				</MyDialog>


				{
					currQues != undefined &&
					<>
						<MyWebView html={lang == 1 ? currQues.question_en : currQues.question_hi} />
						{renderOptions()}
					</>
				}
				{
					isAttempted == 1 &&
					<>
						<Bold style={{ ...GS.mt30, ...GS.mb10, ...GS.fs16, ...GS.tcenter, ...GS.textDarkGray }}>
							{lang == 1 ? "How much sure you are about your answer ?" : "आप अपने उत्तर को लेकर कितने आश्वस्त हैं?"}
						</Bold>
						<View style={{ ...GS.border, ...GS.borderBlue, ...GS.rounded5, ...GS.row100, ...GS.jspaceb, ...GS.pv2, ...GS.bgWhite, ...GS.shadow, }}>
							<TouchableWithoutFeedback onPress={() => suretyClickHandler(1)}>
								<View style={{
									...GS.f1, ...GS.h40, ...GS.jcenter, ...GS.rounded5, ...GS.acenter,
									...(selectedSurety == 1 ? GS.bgheadingColorLight : GS.bgWhite)
								}}>
									<Bold style={{ ...GS.fs16, ...GS.textSuccess }}>100%</Bold>
								</View>
							</TouchableWithoutFeedback>
							<TouchableWithoutFeedback onPress={() => suretyClickHandler(2)}>
								<View style={{
									...GS.borderLeft, ...GS.borderRight,
									...GS.f1, ...GS.h40, ...GS.jcenter, ...GS.acenter,
									...(selectedSurety == 2 ? GS.bgheadingColorLight : GS.bgWhite)
								}}>
									<Bold style={{ ...GS.fs16, ...GS.textDarkGray }}>50%</Bold>
								</View>
							</TouchableWithoutFeedback>
							<TouchableWithoutFeedback onPress={() => suretyClickHandler(3)}>
								<View style={{
									...GS.f1, ...GS.h40, ...GS.jcenter, ...GS.acenter,
									...(selectedSurety == 3 ? GS.bgheadingColorLight : GS.bgWhite)
								}}>
									<Bold style={{ ...GS.fs16, ...GS.textDanger }}>0%</Bold>
								</View>
							</TouchableWithoutFeedback>
						</View>
					</>
				}



				{
					forViewOnly && ((lang == 1 && currQues.answer_explanation_en != "") || (lang == 2 && currQues.answer_explanation_hi != "")) &&
					<View style={{ ...GS.mt25 }}>
						<Bold style={{ ...GS.mb5, ...GS.textPrimaryDark, ...GS.fs16 }}>Explanation:</Bold>
						<MyWebView style={{ ...GS.textDarkGray }} html={lang == 1 ? currQues.answer_explanation_en : currQues.answer_explanation_hi} />
					</View>
				}

				{
					forViewOnly && currQues.video_link != "" &&
					<View style={{ ...GS.mt25 }}>
						<Bold style={{ ...GS.mb5, ...GS.textBlack, ...GS.fs16 }}>Reference Video:</Bold>
						<TouchableWithoutFeedback onPress={() => GlobalFunctions.openExternalUri(currQues.video_link)}>
							<Text style={{ color: Colors.blue }}>{currQues.video_link}</Text>
						</TouchableWithoutFeedback>
					</View>
				}

				{
					forViewOnly && currQues.attachment_link != "" &&
					<View style={{ ...GS.mt25 }}>
						<Bold style={{ ...GS.mb5, ...GS.textBlack, ...GS.fs16 }}>Reference Attachment:</Bold>
						<TouchableWithoutFeedback onPress={() => GlobalFunctions.openExternalUri(currQues.attachment_link)}>
							<Text style={{ color: Colors.blue }}>{currQues.attachment_link}</Text>
						</TouchableWithoutFeedback>
					</View>
				}


				{
					forViewOnly ?
						<View style={{ ...GS.row100, ...GS.jspacea, ...GS.mt20, ...GS.mb15 }}>
							<SubmitButton title="Next" onPress={nextClickHandler} textStyle={{ ...GS.textWhite }} style={{ ...GS.bgheadingColor, ...GS.mh10, ...GS.f1, ...GS.mb10, ...GS.rounded50 }} />
						</View>
						:
						<View style={{ ...GS.jspacea, ...GS.mt20, ...GS.mb15 }}>
							<CancelButton title="Skip" IsLoading={isAttempted == 0 && showButtonLoader}
								disabled={showButtonLoader} onPress={skipClickHandler} textStyle={{ ...GS.textWhite }} style={{ ...GS.bgLightGreen,  ...GS.f1, ...GS.mb10, ...GS.rounded50 }} />
							<SubmitButton title="Submit" IsLoading={isAttempted == 1 && showButtonLoader} disabled={showButtonLoader}
								onPress={submitClickHandler} textStyle={{ ...GS.textWhite }} style={{ ...GS.bgheadingColor,  ...GS.f1, ...GS.mb10 }} />
						</View>
				}

			</View>

		</MyContainer >

	)
}

const optionsStyles = {
	optionsContainer: {
		backgroundColor: Colors.white,
		borderTopLeftRadius: 20,
		borderTopRightRadius: 20,
	},
}

const styles = StyleSheet.create({
	txtPrefLang: {
		justifyContent: 'flex-end',
		alignItems: 'flex-end',
		marginRight: 5,
		paddingBottom: 8
	},
	progressBar: {
		height: 10,
		marginBottom: 15,
		borderRadius: 10,
		backgroundColor: Colors.white,

		elevation: 5,
		shadowOffset: {
			width: 5,
			height: 5
		},
		shadowColor: Colors.lightBlack,
		shadowOpacity: 0.5,
		shadowRadius: 5,
	},
	progressIndicator: {
		height: '100%',
		borderRadius: 9,
		backgroundColor: Colors.primaryDark,
	}
})

export default StartOpenTestScreen;
